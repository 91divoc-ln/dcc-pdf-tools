#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const mime = require("mime");

const assetsDir = path.resolve(__dirname, "..", "assets");
const outDir = path.resolve(__dirname, "..", "src", "assets");

const outputHeader = [
  "// Generated by scripts/convert-assets.js",
  "// DO NOT EDIT THIS FILE MANUALLY",
];

fs.writeFileSync(
  path.join(outDir, "fonts.js"),
  [
    ...outputHeader,
    ...readFiles(path.join(assetsDir, "fonts")).map(
      ({ filename, data }) => `export const ${camelize(filename)} = "${data}";`
    ),
  ].join("\n")
);

fs.writeFileSync(
  path.join(outDir, "img.js"),
  [
    ...outputHeader,
    ...readFiles(path.join(assetsDir, "img")).map(
      ({ filename, data }) =>
        `export const ${camelize(filename)} = "${dataUri(filename, data)}";`
    ),
  ].join("\n")
);

function readFiles(dirname) {
  return fs
    .readdirSync(dirname)
    .filter(
      (filename) => !fs.statSync(path.join(dirname, filename)).isDirectory()
    )
    .map((filename) => ({
      filename,
      data: fs.readFileSync(path.join(dirname, filename)).toString("base64"),
    }));
}

function dataUri(filename, data) {
  return `data:${mime.getType(path.extname(filename).slice(1))};base64,${data}`;
}

function camelize(filename) {
  return path
    .basename(filename, path.extname(filename))
    .replace(/-./g, (match) => match[1].toUpperCase());
}
